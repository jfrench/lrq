---
title: R Foundations
bibliography: [book.bib, packages.bib]
---

A condensed, interactive version of this content is available as a Colab notebook, which can be accessed by clicking the Open in Colab graphic below.

<a href="https://colab.research.google.com/github/jfrench/lrq/blob/master/notebooks/01-r-foundations-notebook.ipynb">
   <img src="https://colab.research.google.com/assets/colab-badge.svg">
</a>

<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" /></a> This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>. 

___

Meaningful data analysis requires the use of computer software.

R statistical software is one of the most popular tools for data analysis in academia, industry, and government. In what follows, we will attempt to build a foundation of basic knowledge and skills with R that we will need for data analysis. Our discussion will not be exhaustive, and many other important aspects of data analysis using R (like plotting) will be discussed later, as needed.

## Setting up R and RStudio Desktop

### What is R?

R is a programming language and environment designed for statistical computing. It was introduced by Robert Gentleman and Robert Ihaka in 1993 as a free implementation of the *S* programming language developed at Bell Laboratories [(https://www.r-project.org/about.html)](https://www.r-project.org/about.html)

Some important facts about R are that:

-   R is free, open source, and runs on many different types of computers (Windows, Mac, Linux, and others).
-   R is an interactive programming language.
    -  We can type and run a command in the Console for immediate feedback, in contrast to a compiled programming language, which compiles a program that is then executed.
-   R is highly extendable.
    -   Many user-created packages are available to extend the functionality beyond what is installed by default.
    -   Users can write their own functions and easily add software libraries to R.

### Installing R

To install R on our personal computer, we will need to download an installer program from the R Project's website [(https://www.r-project.org/)](https://www.r-project.org/). Links to download the installer program for a specific operating system are found at <https://cloud.r-project.org/>. 

We should click on the download link appropriate for our computer's operating system and then go through the process of installing R. A stable link for the most current installer program for the Windows operating system is available at <https://cloud.r-project.org/bin/windows/base/release.html>. (Similar links are not currently available for Mac and Linux computers.)

### Installing RStudio

RStudio Desktop is a free "front end" for R provided by Posit Software (<https://posit.co/>). RStudio Desktop makes doing data analysis with R much easier by adding an Integrated Development Environment (IDE) and providing many other features. Currently, we can download RStudio at <https://posit.co/download/rstudio-desktop/>. We should download the Free version of RStudio Desktop appropriate for our computer and install it.

Having installed both R and RStudio Desktop, we will want to open RStudio Desktop as we continue to learn about R.

### RStudio Layout

RStudio Desktop has four panes:

1.  Console: the pane where commands are run.
2.  Source: the pane where we prepare commands to be run.
3.  Environment/History: the pane where we can see all the objects in our workspace, our command history, and other information.
4.  The Files/Plot/Packages/Help: the pane where we can navigate between directories, view  plots , see available packages, and view help documentation.

To see all RStudio panes, press the keys `Ctrl + Alt + Shift + 0` on a PC or `Cmd + Option + Shift + 0` on a Mac.

@fig-rstudiopanes displays a labeled graphic of the panes. The position of the panes can change depending on how the display preferences are specified, but the look of each pain will be similar.

```{r rstudiopanes}
#| echo: false
#| label: fig-rstudiopanes
#| fig-cap: "The RStudio panes labeled for convenience."
knitr::include_graphics("pictures/rstudio_panes.png")
```

### Customizing the RStudio workspace

At this point, we should make a small workspace customization that will likely save us from experiencing future frustration. R provides a "feature" that allows us to "save a workspace". This allows us to easily pick up our analysis where we last left off. The issue with this is that over time we accumulate a lot of environmental artifacts that can conflict with each other. This can lead to errors and incorrect results that we will need to deal with. Additionally, this "feature" hinders the ability of others to reproduce our analysis because other users are unlikely to have the same workspace.

To turn off this feature, in the RStudio menu bar we click Tools → Global Options and then make sure the "General" option is selected. Then we make the following changes (if necessary):

1.  Uncheck the box for "Restore .RData into workspace at startup".
2.  Change the toggle box for "Save workspace to .RData on exit" to "Never".
3.  Click Apply then OK to save the changes.

@fig-generaloptions displays what these options should look like.

```{r}
#| echo: false
#| label: fig-generaloptions
#| fig-cap: "The General options window."
knitr::include_graphics("pictures/general_options.png")
```

## Running code, scripts, and comments

We can run code in R by typing it in the Console next to the `>` symbol and pressing the Enter key.

If we need to successively run multiple commands, it's better to write our commands in a "script" file and then save the file. The commands in a Script file are often generically referred to as "code".

Script files make it easy to:

-   Reproduce our data analysis without retyping all our commands.
-   Share our code with others.

A new Script file can be obtained by:

-   Clicking File → New File → R Script in the RStudio menu bar.
-   Pressing `Ctrl + Shift + n` on a PC or `Cmd + Shift + n` on a Mac.

There are various ways to run code from a Script file. The most common ones are:

1.  Highlight the code we want to run and click the Run button at the top of the Script pane. The Run button icon is shown in @fig-run-button.
2.  Highlight the code we want to run and press "Ctrl + Enter" on our keyboard. If we don't highlight anything, by default, RStudio runs the command the cursor currently lies on.

```{r}
#| echo: false
#| label: fig-run-button
#| fig-cap: "The Run icon can be clicked to run a selection of commands."
knitr::include_graphics("pictures/run_button.png")
```

To save a Script file:

-   Click File → Save in the RStudio menu bar.
-   Press `Ctrl + s` on a PC or `Cmd + s` on a Mac.

A comment is a set of text ignored by R when submitted to the Console.

A comment is indicated by the `#` symbol. Nothing to the right of the `#` is executed by the Console.

To comment (or uncomment) multiple lines of code in the Source pane of RStudio, we highlight the code we want to comment and press `Ctrl + Shift + c` on a PC or `Cmd + Shift + c` on a Mac.

___

### Hands-on Practice {.unnumbered}

Perform the following tasks:

1.  Type `1+1` in the Console and press Enter.
2.  Open a new Script in RStudio.
3.  Type `mean(1:3)` in the Script file.
4.  Type `# mean(1:3)` in the Script file.
5.  Run the commands from the Script using an approach mentioned above.
6.  Save the Script file.
7.  Use the keyboard shortcut to "comment out" some of the lines of the Script file.

___

## Assignment {#sec-assignment}

R works on various types of objects that we'll learn more about later.

To store an object in the computer's memory we must assign it a name using the assignment operator `<-` or the equal sign `=`.

Some comments:

-   In general, both `<-` and `=` can be used for assignment.
-   Pressing `Alt + -` on a PC or `Option + -` on a Mac will insert `<-` into the R Console and Script files.
    -   If we are creating an R Markdown (rmd) or Quarto Markdown (qmd) file, then this shortcut will only insert `<-` if we are in an R code block.
-   `<-` and `=` are NOT synonyms, but can be used identically most of the time.

**It is best to use `<-` for assigning a name to an object and reserving `=` for specifying function arguments.** See Section @sec-comparing-assgn-op for a deeper explanation.

Once an object has been assigned a name, it can be printed by running the name of the object in the Console or using the `print` function.

___

### Hands-on Practice {.unnumbered}

Run the following commands in the Console:

```{r}
#| eval: true
m <- mean(1:10)
```

In the code above, we compute the sample mean of the values $1, 2, \ldots, 10$, then assign it the name `m`. However, nothing is printed by the R Console.

```{r}
#| eval: false
m
```

When we type the name of an object in the R Console and run the command, R will print at least some of the information in the object. In this case, the value stored in `m`, the value `5.5` will be returned.

```{r}
#| eval: false
print(m)
```

The command above is a formal way of printing an object in R and can be especially useful when an object has a defined `print` method with additional arguments. We will discuss this later when it is relevant.

___

## Functions

A function is an object that performs a certain action or set of actions based on objects it receives from its arguments. We use a sequence of function calls to perform data analysis.

To use a function, we type the function's name in the Console (or Script) and then supply the function's "arguments" between parentheses, `()`.

The arguments of a function are pieces of data or information the function needs to perform the requested task (i.e., the function "inputs"). Each argument we supply is separated by a comma, `,`. Some functions have default values for certain arguments and do not need to specified unless something besides the default behavior is desired.

The `mean` function computes the sample mean of an R object `x`. (We can look at the documentation for the function by running `?mean` in the Console. We'll talk more about getting help with R shortly.) The `mean` function also has a `trim` argument that indicates the, "... fraction ... of observations to be trimmed from each end of `x` before the mean is computed" [@R-base, `?mean`].

Consider the command below, in which we compute the mean of the set of values `1, 5, 3, 2, 10`.

```{r}
mean(c(1, 5, 3, 4, 10))
```

In the next command, we compute a trimmed mean of the numeric vector. Since the `trim` argument is `0.2`, we "trim" the smallest 20% of values and the largest 20% of values from the numeric vector prior to computing the mean.

```{r}
mean(c(1, 5, 3, 4, 10), trim = 0.2)
```

The output differs for the two function calls because in the first we compute `(1 + 5 + 3 + 4 + 10)/5 = 23/5 = 4.6` while in the second we remove the smallest 20% and largest 20% of the values (i.e., dropping `1` and `10`) and compute `(5 + 3 + 4)/3 = 12/3 = 4`.

## Packages

Packages are collections of functions, data, and other objects that extend the functionality available in R by default.

R packages can be installed using the `install.packages` function and loaded using the `library` function.

___

### Hands-on Practice {.unnumbered}

The **tidyverse** [@R-tidyverse] is a popular ecosystem of R packages used for manipulating, tidying, and plotting data. Currently, the **tidyverse** is comprised of the following packages:

-   **ggplot2**: A package for plotting based on the "Grammar of Graphics" [@R-ggplot2].
-   **purrr**: A package for functional programming [@R-purrr].
-   **tibble**: A package providing a more advanced data frame [@R-tibble].
-   **dplyr**: A package for manipulating data [@R-dplyr]. . More specifically, it provides " a grammar of data manipulation".
-   **tidyr**: A package to help create "tidy" data [@R-tidyr]. Tidy data is an data organization style often convenient for data analysis.
-   **stringr**: A package for working with character/string data [@R-stringr].
-   **readr**: A package for importing data [@R-readr].
-   **forcats**: A package for working with categorical data [@R-forcats].

Install the set of **tidyverse** R packages by running the command below in the Console.

```{r}
#| eval: false
install.packages("tidyverse")
```

After we install the **tidyverse**, we load the collection of packages by running the command below.

```{r}
#| eval: false
library(tidyverse)
```

We should see something like the output below.

```{r}
library(tidyverse)
```

Notice that when we loaded the **tidyverse** packages above that `dplyr::lag()` masks `stats::lag()`. What this means is that both the **dplyr** and **stats** packages have a function called `lag`. Different packages may use the same function name to provide certain functionality. The functions will likely be used for different tasks or require different arguments. 

To refer to a function in a specific package, we should add the syntax `package::` prior to the function name. In the code below, we run `stats::lag` and `dplyr::lag` on two different objects using the `::` syntax.

```{r}
# run stats::lag on a numeric vector
stats::lag(1:10, 2)
```

```{r}
# run dplyr::lag on a numeric vector
dplyr::lag(1:10, 2)
```

The output returned by the two functions is different because the functions are intended to do different things. The `stats::lag` function call shifts the time base of the provided time series object back 2 units, while the call to `dplyr::lag` provides the values 2 positions earlier in the object. 

Note: this example is not intended to help us understand the `lag` function. This example highlights how to use the `::` syntax to call a function in a specific package when the function name is used in multiple packages.

___

## Getting help

There are many ways to get help in R.

If we know the command for which we want help, then we run `?command` in the Console to access the documentation for the object (where `command` is replaced by the name of the relevant command). This approach will also work with data sets, package names, object classes, etc. If we need to refer to a function in a specific package, we can use `?package::function` to get help on a specific function, e.g., `?dplyr::filter`.

The documentation will provide:

-   A **Description** section with general information about the function or object.
-   A **Usage** section with a generic template for using the function or object.
-   An **Arguments** section summarizing the function inputs the function needs.
-   A **Details** section may be provided with additional information about the function or object.
-   A **Value** section that describes what is returned by the function.
-   An **Examples** section providing examples of how to use the function. Usually, these can be copied and pasted into the Console to better understand the function arguments and what it produces.

If we need to find a command related to a certain *topic*, then `??topic` will search for the topic through all installed documentation and bring up any vignettes, code demonstrations, or help pages that include the topic for which we searched.

If we are trying to figure out why an error is being produced, what packages can be used to perform a certain analysis, how to perform a complex task that we can't seem to figure out, etc., then we can simply do a web search for what we're trying to figure out! Because R is such a popular programming language, it is likely we will find a [stackoverflow](https://www.stackoverflow.com) response, a helpful blog post, an R users forum response, etc., that addresses our question.

___

### Hands-on Practice {.unnumbered}

Do the following:

1.  Run`?lm` in the Console to get help on the `lm` function, which is one of the main functions used for fitting linear models.
2.  Run `??logarithms` in the Console to search the R documentation for information about logarithms. It is likely that we will see multiple help pages that mention "logarithm", so we may end up needing to find the desired entry via trial and error.
3.  Run a web search for something along the lines of "How do I change the size of the axis labels in an R plot?".

___

## Data types and structures

### Basic data types

R has 6 basic ("atomic") vector types [(https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Basic-types)](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Basic-types) [@R-base]:

1.  character: collections of characters. E.g., `"a"`, `"hello world!"`.
2.  double: decimal numbers. e.g., `1.2`, `1.0`.
3.  integer: whole numbers. In R, we must add `L` to the end of a number to specify it as an integer. E.g., `1L` is an integer but `1` is a double.
4.  logical: Boolean values, `TRUE` and `FALSE`.
5.  complex: complex numbers. E.g., `1+3i`.
6.  raw: a type to hold raw bytes.

Both double and integer values are specific types of numeric values.

The `typeof` function returns the R internal type or storage mode of any object.

Consider the output of the commands below. What are some of the difference in the output?

```{r}
typeof(1)
```

```{r}
typeof(1L)
```

```{r}
typeof("hello world!")
```

### Other important object types

There are other important types of objects in R that are not basic. We will discuss a few. The R Project manual provides additional information about available types [(https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Basic-types)](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Basic-types).

#### Numeric

An object is `numeric` if it is of type `integer` or `double`. In that case, it's `mode` is said to be `numeric`.

The `is.numeric` function tests whether an object can be interpreted as numbers. We can use it to determine whether an object is `numeric`. We do some examples of this in the code chunks run below. Are any of the results surprising?

```{r}
is.numeric("hello world!")
```

```{r}
is.numeric(1)
```

```{r}
is.numeric(1L)
```

#### NULL

`NULL` is a special object to indicate an object is absent. An object having a length of zero is not the same thing as an object being absent.

#### NA

A "missing value" occurs when the value of something isn't known. R uses the special object `NA` to represent a missing value.

If we have a missing value, we should represent that value as `NA`. `"NA"` is not the same object as `NA`.

#### Functions

From R's perspective, a function is simply another data type.

#### A comment about classes

Every R object has a `class` that may be distinct from its type. Many functions will operate differently depending on an object's `class`.

### Data structures

R operates on data structures. A data structure is a "container" that holds certain kinds of information.

R has 5 basic data structures:

1.  vector.
2.  matrix.
3.  array.
4.  data frame.
5.  list.

Vectors, matrices, and arrays are homogeneous objects that can only store a single data type at a time. Data frames and lists can store multiple data types.

Vectors and lists are considered one-dimensional objects. A list is technically a vector. Vectors of a single type are atomic vectors [(https://cran.r-project.org/doc/manuals/r-release/R-lang.html#List-objects)](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#List-objects). Matrices and data frames are considered two-dimensional objects. Arrays can have 1 or more dimensions.

The relationship between dimensionality and data type for the basic data structures is summarized in @tbl-datastructures1, which is based on a [table](https://adv-r.had.co.nz/Data-structures.html#data-structure) in the first edition of Hadley Wickham's *Advanced R* [@advancedr].

```{r}
#| echo: false
#| label: tbl-datastructures1
#| tbl-cap: "A table summarizing the relationship between dimensionality and data type homogeneity for the 5 basic data structures."
dsdf <- data.frame(
  dimensionality = c("1", "2", "1 or more"),
  homogeneous = c("atomic vector", "matrix", "array"),
  heterogeneous = c("list", "data frame", ""), 
  check.names = FALSE)
colnames(dsdf) <- c("number of dimensions", "homogeneous data type", "heterogeneous data types")
knitr::kable(dsdf)
```

## Vectors

A *vector* is a one-dimensional set of data of the same type.

### Direct creation

The most basic way to create a vector is the `c` (combine) function. The `c` function combines values into an atomic vector or list.

The following commands create vectors of type `numeric`, `character`, and `logical`, respectively.

-   `c(1, 2, 5.3, 6, -2, 4)`
-   `c("one", "two", "three")`
-   `c(TRUE, TRUE, FALSE, TRUE)`

___

### Hands-on Practice

Run the commands below in the Console.

```{r}
#| eval: false
c(1, 2, 5.3, 6, -2, 4)
```

```{r}
#| eval: false
c("one", "two", "three")
```

```{r}
#| eval: false
c(TRUE, TRUE, FALSE, TRUE)
```

___


R provides two main functions for creating vectors with specific patterns: `seq` and `rep`.

### The `seq` function

The `seq` (sequence) function is used to create an equidistant series of numeric values. Some examples:

-   `seq(1, 10)` creates a sequence of numbers from 1 to 10 in increments of 1.
-   `1:10` creates a sequence of numbers from 1 to 10 in increments of 1.
-   `seq(1, 20, by = 2)` creates a sequence of numbers from 1 to 20 in increments of 2.
-   `seq(10, 20, len = 100)` creates a sequence of numbers from 10 to 20 of length 100.

___

### Hands-on Practice {.unnumbered}

Run the commands below in the Console and try to answer the questions below.

What does the `by` argument of the `seq` function control?

What does the `len` argument of the `seq` function control?

```{r}
#| eval: false
seq(1, 10)
```

```{r}
#| eval: false
1:10
```

```{r}
#| eval: false
seq(1, 20, by = 2)
```

```{r}
#| eval: false
seq(10, 20, len = 100)
```

___

### The `rep` function

The `rep` (replicate) function can be used to create a vector by replicating values. Some examples:

-   `rep(1:3, times = 3)` replicates the sequence `1, 2, 3` three times in a row.
-   `rep(c("trt1", "trt2", "trt3"), times = 1:3)` replicates `"trt1"` once, `"trt2"` twice, and `"trt3"` three times.
-   `rep(1:3, each = 3)` replicates each element of the sequence 1, 2, 3 three times.

___

### Hands-on Practice {.unnumbered}

Run the commands below in the Console and try to answer the questions below.

What does the `times` argument of the `rep` function control?

What does the `each` argument of the `rep` function control?

```{r}
#| eval: false
rep(1:3, times = 3)
```

```{r}
#| eval: false
rep(c("trt1", "trt2", "trt3"), times = 1:3)
```

```{r}
#| eval: false
rep(1:3, each = 3)
```

___

### Combining vectors

Multiple vectors can be combined into a new vector object using the `c` function. E.g., `c(v1, v2, v3)` will combine vectors `v1`, `v2`, and `v3`.

___

### Hands-on Practice {.unnumbered}

Run the commands below in the Console. Determine what action each command performs.

```{r}
#| eval: false
v1 <- 1:5
```

```{r}
#| eval: false
v2 <- c(1, 10, 11)
```

```{r}
#| eval: false
v3 <- rep(1:2, each = 3)
```

```{r}
#| eval: false
new <- c(v1, v2, v3)
```

```{r}
#| eval: false
new
```

___

### Categorical vectors

Categorical data should be stored as a `factor` in R. Even though our code related to categorical data may work when stored as `character` or `numeric` data because a cautious developer planned for that possibility, it is best to use good coding practices that minimize potential issues.

#### Creating a `factor` object

The `factor` function takes a vector of values that can be coerced to type `character` and converts them to an object of class `factor`. In the code chunks below, we create two `factor` objects from vectors.

```{r}
f1 <- factor(rep(1:6, times = 3))
f1
```

```{r}
f2 <- factor(c("a", 7, "blue", "blue", FALSE))
f2
```

A printed `factor` object lists the `Levels` (i.e., unique categories) of the object.

The `is.factor` function can be used to determine whether an object is a `factor`.

`factor` objects aren't technically vectors (e.g., running `is.factor(f2)` based on the above code will return `FALSE`) though they essentially behave like vectors, which is why they are included here.

___

#### Hands-on Practice {.unnumbered}

Complete the following tasks:

1.  Create a vector named `grp` that has two levels: `a` and `b`, where the first 7 values are `a` and the second 4 values are `b`.
2.  Run `is.factor(grp)` in the Console.
3.  Run `is.vector(grp)` in the Console.
4.  Run `typeof(grp)` in the Console.

Related to the last task, a `factor` object is *technically* a collection of integers that have labels associated with each unique integer value.

___

#### Creating an ordered `factor` object

Let's create an ordered `factor` object.

Suppose we have categorical data with the categories `small`, `medium`, and `large`. We create a `size` vector with hypothetical data below.

```{r}
size <- c("small", "medium", "small", "large", "medium", "medium", "large")
```

If we convert `size` to a `factor` object, R will automatically order the levels of `size` alphabetically, as seen from the code chunk below.

```{r}
factor(size)
```

This is not technically a problem, but can result in undesirable side effects such as plots with levels in an undesirable order.

To create an ordered `factor` object, we specify the desired order of the levels using the `levels` argument and set the `ordered` argument to `TRUE`, as in the code below.

```{r}
factor(size, levels = c("small", "medium", "large"), ordered = TRUE)
```

### Extracting parts of a vector

Parts a vector can be extracted by appending an index vector in square brackets `[]` to the name of the vector, where the index vector indicates which parts of the vector to retain or exclude. We can include either numbers or logical values in our index vector. We discuss both approaches below.

#### Selection using a numeric index vector

Let's create a `numeric` vector `a` with the values 2, 4, 6, 8, 10, 12, 14, 16.

```{r}
a <- seq(2, 16, by = 2)
a
```

To extract the 2nd, 4th, and 6th elements of `a`, we can use the code below. The code indicates that the 2nd, 4th, and 6th elements of `a` should be extracted.

```{r}
a[c(2, 4, 6)]
```

We can also use "negative" indexing to indicate the elements of the vector we want to exclude. Specifically, supplying a negative index vector indicates the values we want to exclude from our selection.

In the example below, we use the minus (`-`) sign in front of the index vector `c(2, 4, 6)` to indicate we want all elements of `a` EXCEPT the 2nd, 4th, and 6th.

```{r}
a[-c(2, 4, 6)]
```

Running the code chunk below excludes the 3rd through 6th elements of `a`.
 
```{r}
a[-(3:6)]
```

#### Logical expressions

A logical expression uses one or more logical operators to determine which elements of an object satisfy the specified statement. The basic logical operators are:

-   `<`, `<=`: less than, less than or equal to.
-   `>`, `>=`: greater than, greater than or equal to.
-   `==`: equal to.
-   `!=`: not equal to.

Creating a logical expression with a vector will result in a logical vector indicating whether each element satisfies the logical expression.

___

#### Hands-on Practice {.unnumbered}

Run the following commands in R and see what is printed. What task is each statement performing?

```{r}
#| eval: false
a > 10
```

```{r}
#| eval: false
a <= 4
```

```{r}
#| eval: false
a == 10
```

```{r}
#| eval: false
a != 10
```

___

#### The "and", "or", and "not" operators

We can create more complicated logical expressions using the "and", "or", and "not" operators.

-   `&`: and.
-   `|`: or.
-   `!`: not, i.e., not true.

The `&` operator returns `TRUE` if all logical values connected by the `&` are `TRUE`, otherwise it returns `FALSE`. 

The `|` operator returns `TRUE` if any logical values connected by the `|` are `TRUE`, otherwise it returns `FALSE`.

The `!` operator returns the complement of a logical value or expression.

___

#### Hands-on Practice {.unnumbered}

Run the following commands below in the Console. 

What action is each command performing?

What role does `&` serve in a sequence of logical values? 

Similarly, what roles do `|` and `!` serve in a sequence of logical values?


```{r}
#| eval: false
TRUE & TRUE & TRUE
```

```{r}
#| eval: false
TRUE & TRUE & FALSE
```

```{r}
#| eval: false
FALSE | TRUE | FALSE
```

```{r}
#| eval: false
FALSE | FALSE | FALSE
```

```{r}
#| eval: false
!TRUE
```

```{r}
#| eval: false
!FALSE
```

___

#### Connecting logical expressions

Logical expressions can be connected via `&` and `|` (and impacted via `!`), in which case the operators are applied elementwise (i.e., to all of the first elements in the expressions, then all the second elements in the expressions, etc).

___

#### Hands-on Practice {.unnumbered}

Run the following commands in R and see what is printed. What task is each statement performing? 

Note that the parentheses `()` are used to group logical expressions to more easily understand what is being done. This is a good coding style to follow.

```{r}
#| eval: false
(a > 6) & (a <= 10)
```

```{r}
#| eval: false
(a <= 4) | (a >= 12)
```

```{r}
#| eval: false
!((a <= 4) | (a >= 12))
```

#### Selection using logical expressions

Logical expressions can be used to return parts of an object satisfying the appropriate criteria. Specifically, we pass logical expressions within the square brackets to access part of a data structure. This syntax will return each element of the object for which the expression is `TRUE`.

___

### Hands-on Practice {.unnumbered}

Run the following commands in R and see what is printed. What task is each statement performing?

```{r}
#| eval: false
a[a < 6]
```

```{r}
#| eval: false
a[a == 10]
```

```{r}
#| eval: false
a[(a < 6)|(a == 10)]
```

___

## Helpful functions

We provide a brief overview of R functions we often use in our data analysis.

### General functions

For brevity, @tbl-generalfunctions provides a table of functions commonly useful for basic data analysis along with a description of their purpose.

```{r}
#| echo: false
#| label: tbl-generalfunctions
#| tbl-cap: "Functions frequently useful for data analysis."
gf_df <- data.frame(
  `function` = c(
    "`length`",
    "`sum`",
    "`mean`",
    "`var`",
    "`sd`",
    "`range`",
    "`log`",
    "`summary`",
    "`str`"
  ),
  purpose = c(
    "Determines the length/number of elements in an object.",
    "Sums the elements in the object.",
    "Computes the sample mean of the elements in an object.",
    "Computes the sample variance of the elements in an object.",
    "Computes the sample standard deviation the elements of an object.",
    "Determines the range (minimum and maximum) of the elements of an object.",
    "Computes the (natural) logarithm of elements in an object.",
    "Returns a summary of an object. The output changes depending on the class type of the object.",
    "Provides information about the structure of an object. Usually, the class of the object and some information about its size."
  )
)
knitr::kable(gf_df)
```

___

### Hands-on Practice {.unnumbered}

Run the following commands in the Console. Determine what task each command is performing.

```{r}
#| eval: false
x <- rexp(100) # sample 100 iid values from an Exponential(1) distribution
```

```{r}
#| eval: false
length(x)
```

```{r}
#| eval: false
sum(x)
```

```{r}
#| eval: false
mean(x)
```

```{r}
#| eval: false
var(x)
```

```{r}
#| eval: false
sd(x)
```

```{r}
#| eval: false
range(x)
```

```{r}
#| eval: false
log(x)
```

```{r}
#| eval: false
summary(x)
```

```{r}
#| eval: false
str(x) # structure of x
```

___

### Functions related to statistical distributions

R is designed specifically for statistical analysis, so it natively includes functionality for determining properties of statistical distributions. R makes it easy to evaluate the cumulative distribution function (CDF) of a distribution, the quantiles of a distribution, the density or mass of a distribution, and to sample random values from a distribution.

Suppose that a random variable $X$ has the `dist` distribution. The function templates in the list below describe how to obtain certain properties of $X$.

-   `p[dist](q, ...)`: returns the cdf of $X$ evaluated at `q`, i.e., $p=P(X\leq q)$.
-   `q[dist](p, ...)`: returns the inverse cdf (or quantile function) of $X$ evaluated at $p$, i.e., $q = \inf\{x: P(X\leq x) \geq p\}$.
-   `d[dist](x, ...)`: returns the mass or density of $X$ evaluated at $x$ (depending on whether it's discrete or continuous).
-   `r[dist](n, ...)`: returns an independent and identically distributed random sample of size `n` having the same distribution as $X$.
-   The `...` indicates that additional arguments describing the parameters of the distribution may be required.

To determine the distributions available by default in R, run `?Distributions` in the R Console. We demonstrate some of this functionality in the practice below.

Note: If we are using functions related to statistical distributions in R, then it is imperative that we look at the associated documentation to determine the parameterization of the distribution, as this dramatically impacts the results. Some distributions have multiple common parameterizations.

___

### Hands-on Practice {.unnumbered}

Run the following commands in R to see the output. Before each command is a description of the action performed by the command.

`pnorm(1.96, mean = 0, sd = 1)` returns the probability that a standard normal random variable is less than or equal to 1.96, i.e., $P(X \leq 1.96)$.

```{r}
#| eval: false
pnorm(1.96, mean = 0, sd = 1)
```

`qunif(0.6, min = 0, max = 1)` returns the value $x$ such that $P(X\leq x) = 0.6$ for a uniform random variable on the interval $[0, 1]$.

```{r}
#| eval: false
qunif(0.6, min = 0, max = 1)
```

`dbinom(2, size = 20, prob = .2)` returns the probability that $X$ equals 2 when $X$ has a Binomial distribution with $n=20$ trials and the probability of a successful trial is $0.2$.

```{r}
#| eval: false
dbinom(2, size = 20, prob = .2)
```

`dexp(1, rate = 2)` evaluates the density of an exponential random variable with mean = 1/2 (i.e., the reciprocal of the `rate`) at $x=1$.

```{r}
#| eval: false
dexp(1, rate = 2)
```

`rchisq(100, df = 5)` draws a sample of 100 observations from a chi-squared random variable with 5 degrees of freedom.

```{r}
#| eval: false
rchisq(100, df = 5)
```

___

## Data Frames

Data frames are a *fundamental* data structure used by most of R's modeling software. Data frames are two-dimensional data objects where each column of a data frame is a vector (or variable) of possibly different data types. The class of a **base** R data frame is `data.frame`, which is technically a specially structured `list`.

In general, we prefer our data to be *tidy*, which means that each variable forms a column of the data frame, and each observation forms a row.

### Direct creation

Data frames are directly created by passing vectors into the `data.frame` function.

The names of the columns in the data frame are the names of the vectors we give the `data.frame` function. Consider the following simple example.

```{r}
# simple data frame creation
d <- c(1, 2, 3, 4)
e <- c("red", "white", "blue", NA)
f <- c(TRUE, TRUE, TRUE, FALSE)
df <- data.frame(d,e,f)
df
```

The columns of a data frame can be renamed using the `names` function on the data frame and assigning a vector of names to the data frame.

```{r}
# name columns of data frame
names(df) <- c("ID", "Color", "Passed")
df
```

The columns of a data frame can be named when we create the data frame by using the syntax `name =` for each vector of data.

```{r}
# create data frame with better column names
df2 <- data.frame(ID = d, Color = e, Passed = f)
df2
```

### Importing Data

Direct creation of data frames is only appropriate for very small data sets. In practice, we likely want to import data from a file into R.

The `read.table` function imports data in table format from file into R as a data frame.

The basic usage of this function is: `read.table(file, header = TRUE, sep = ",")`.

-   `file` is the file path and name of the file we want to import into R.
    -   If we don't know the file path, setting `file = file.choose()` will bring up a dialog box asking us to locate the file we want to import.
-   `header` specifies whether the data file has a header (variable labels for each column of data in the first row of the data file).
    -   If we don't specify this option in R or use `header = FALSE`, then R will assume the file doesn't have any headings.
    -   `header = TRUE` tells R to read in the data as a data frame with column names taken from the first row of the data file.
-   `sep` specifies the delimiter separating elements in the file.
    -   If each column of data in the file is separated by a space, then use `sep = " "`.
    -   If each column of data in the file is separated by a comma, then use `sep = ","`.
    -   If each column of data in the file is separated by a tab, then use `sep = "\t"`.

___

### Hands-on Practice {.unnumbered}

Consider reading in a csv (comma separated file) with a header. 

The file in question is available in the **api2lm package** [@R-api2lm] and contains crime-related information for U.S. states for the year 2009.  However, we will import the data directly from a location where it is stored on GitHub. 

In the code below, we specify the path of the file prior to specifying the file name (`crime2009.csv`). Since the file has a header, we specify `header = TRUE`. Since the data values are separated by commas, we specify `sep = ","`. 

```{r}
# specify file path
path <- "https://raw.githubusercontent.com/jfrench/api2lm/main/inst/extdata/crime2009.csv"
# import data as data frame
crime2009 <- read.table(file = path, header = TRUE, sep = ",")
# view data structure
str(crime2009)
```

Running `str` on the data frame gives us a general picture of the values stored in the data frame.

The `read_table` function in the **readr** package [@R-readr] is arguably a better way of importing tabular data from file and uses similar syntax. To import data contained in Microsoft Excel files, we can use functions available in the **readxl** package [@R-readxl].

___

### Extracting parts of a data frame

R provides many ways to extract parts of a data frame. We will provide several examples using the `mtcars` data frame in the **datasets** package.

The `mtcars` data frame has `r nrow(datasets::mtcars)` observations for `r ncol(datasets::mtcars)` variables. The variables are:

-   `mpg`: miles per gallon.
-   `cyl`: number of cylinders.
-   `disp`: engine displacement (cubic inches).
-   `hp`: horsepower.
-   `drat`: rear axle ratio.
-   `wt`: weight in 1000s of pounds.
-   `qsec`: time in seconds to travel 0.25 of a mile.
-   `vs`: engine shape (0 = V-shaped, 1 = straight).
-   `am`: transmission type (0 = automatic, 1 = manual).
-   `gear`: number of forward gears.
-   `carb`: number of carburetors.

We load the data set and examine the basic structure by running the commands below.

```{r}
data(mtcars) # load data set
str(mtcars)  # examine data structure
```

We should do some data cleaning on this data set (see @sec-ch-eda), but we will refrain from this for simplicity.

___

#### Direct extraction {#sec-direct-extraction}

The column variables of a data frame may be extracted from a data frame by specifying the data frame's name, then `$`, and then specifying the name of the desired variable. This pulls the actual variable vector out of the data frame, so the thing extracted is a vector, not a data frame.

Below, we extract the `mpg` variable from the `mtcars` data frame.

```{r}
mtcars$mpg
```

Another way to extract a variable from a data frame as a vector is `df[, "var"]`, where `df` is the name of our data frame and `var` is the desired variable name. 
We extract the `mpg` vector from `mtcars` below.

```{r}
mtcars[,"mpg"]
```

The syntax above is a special case of extracting information from a data frame using `df[rows, columns]` style syntax, where `rows` and `columns` indicate the desired rows or columns to extract. If either the `rows` or `columns` are left blank, then all `rows` or `columns`, respectively, are extracted.

The `df[rows, columns]` syntax has confusing behavior when you only specify a single column. Specifically, the `[` operator has a `drop` argument that is set to `TRUE` by default.  The `drop` argument controls whether the result is coerced to the lowest possible dimension. If we we only specify a single column of our data frame, then R will coerce the result to a vector by default.

To get around the default `drop` behavior we can change the `drop` argument to `FALSE`, as shown below.

```{r}
# extract mpg variable, keep as data frame
mtcars[,"mpg", drop = FALSE]
```

An easier approach to avoiding the default `drop` behavior is to use the slightly different syntax `df["var"]` (notice we no longer have the comma to separate rows and columns). We use this syntax below for the `mpg` variable in `mtcars`.

```{r}
# extract mpg variable, keep as data frame
mtcars["mpg"]
```

To select multiple variables in a data frame, we can provide a character vector with multiple variable names between `[]`. In the example below, we extract both the `mpg` and `cyl` variables from `mtcars`.

```{r}
mtcars[c("mpg", "cyl")]
```

We can also use numeric indices to directly indicate the rows or columns of the data frame that we would like to extract. We can also combine this syntax sylte with the syntax styles previously discussed. 

-   `df[1,]` accesses the first row of `df`.
-   `df[1:2,]` accesses the first two rows of `df`.
-   `df[,2]` accesses the second column of `df`.
-   `df[1:2, 2:3]` accesses the information in rows 1 and 2 of columns 2 and 3 of `df`.
-   `df[c(1, 3, 5), c("var1", "var2")]` accesses the information in rows 1, 3, and 5 of the `var1` and `var2` variables.

We practice these techniques below.

___

#### Hands-on Practice {.unnumbered}

Run the following commands in the Console. Determine what task each command is performing.

```{r}
#| eval: false
df3 <- data.frame(numbers = 1:5,
                  characters = letters[1:5],
                  logicals = c(TRUE, TRUE, FALSE, TRUE, FALSE))
```

```{r}
#| eval: false
df3
```

```{r}
#| eval: false
df3$logicals
```

```{r}
#| eval: false
df3[1, ]
```

```{r}
#| eval: false
df3[, 3]
```

```{r}
#| eval: false
df3[, 2:3]
```

```{r}
#| eval: false
df3[, c("numbers", "logicals")]
```

```{r}
#| eval: false
df3[c("numbers", "logicals")]
```

___

#### Extraction using logical expressions {#sec-extraction-logical}

Logical expressions can be used to subset a data frame.

To select specific rows of a data frame, we use the syntax `df[logical vector, ]`, where `logical vector` is a valid logical vector whose length matches the number of rows in the data frame. Usually, the logical vector is created using a logical expression involving one or more data frame variables. In the code below, we extract the rows of the `mtcars` data frame for which the `hp` variable is more than 250.

```{r}
mtcars[mtcars$hp > 250,]
```

We can make the logical expression more complicated and also select specific variables using the syntax discussed in @sec-direct-extraction. Below, we extract the rows of `mtcars` with 8 cylinders and `mpg > 17`, while extracting only the `mpg`, `cyl`, `disp`, and `hp` variables.

```{r}
# return rows with `cyl == 8` and `mpg > 17`
# return columns mpg, cyl, disp, hp
mtcars[mtcars$cyl == 8 & mtcars$mpg > 17, 
       c("mpg", "cyl", "disp", "hp")]
```

#### Extraction using the `subset` function

The techniques for extracting parts of a data frame discussed in Sections -@sec-direct-extraction and -@sec-extraction-logical are the fundamental approaches for selecting desired parts of a data frame. However, these techniques can seem complex and difficult to interpret, particularly when looking back at code we have written in the past. A sleeker approach to extracting part of a data frame is to use the `subset` function.

The `subset` function returns the parts of a data frame that meets the specified conditions. The basic usage of this function is: `subset(x, subset, select, drop = FALSE)`

-   `x` is the object we want to subset.
    -   `x` can be a vector, matrix, or data frame.
-   `subset` is a logical expression that indicates the elements or rows of `x` to keep (`TRUE` means keep).
-   `select` is a vector that indicates the columns to keep.
-   `drop` is a logical value indicating whether the data frame should "drop" into a vector if only a single row or column is kept. The default is `FALSE`, meaning that a data frame will always be returned by the `subset` function by default.

There are many clever ways of using `subset` to select specific parts of a data frame. We encourage the reader to run `?base::subset` in the Console for more details.

___

#### Hands-on Practice {.unnumbered}

Run the following commands in the Console to use the `subset` function to extract parts of the `mtcars` data frame.

The command below subsets the rows of `mtcars` that have more than 4 gears. Note that any variables referred to in the `subset` function are assumed to be part of the supplied data frame or are available in memory.

```{r}
#| eval: false
subset(mtcars, subset = gear > 4)
```

The command below will select the `disp`, `hp`, and `gear` variables of `mtcars` but will exclude the other columns.

```{r}
#| eval: false
subset(mtcars, select = c(disp, hp, gear))
```

Lastly, we can use the following command to perform the two previous subsetting actions in one step.

```{r}
#| eval: false
subset(mtcars, subset = gear > 4, select = c(disp, hp, gear))
```

An advantage of the `subset` function is that it makes code easily readable. Using conventional base R syntax, the final code example above would be: `mtcars[mtcars$gear>4, c("disp", "hp", "gear")]`.

It can be difficult to look at base R code and immediately tell what it happening, so the `subset` function adds clarity. This is important for collaborating with others, including our future selves! 

___

### Modifying a Data Frame

Columns can be added to a data frame using `$` and the assignment operator. In the example below, we add a new column, `kpg`, to the `mtcars` data set based on a transformatino of the `mpg` column.

```{r}
mtcars$kpg <- mtcars$mpg*1.6
head(mtcars)
```

## Using the pipe operator

R's native pipe operator (`|>`) allows us to "pipe" the object on the left side of the operator into the first argument of the function on the right side of the operator. There are ways to modify this default behavior, but we will not discuss them.

The pipe operator is a convenient way to string together numerous steps in a string of commands. This coding style is generally considered more readable than other approaches because we can incrementally modify the object through each pipe, and each step of the pipe is easy to understand. Ultimately, it's a stylistic choice that we can decide to adopt or ignore.

Consider the following approaches to extracting part of `mtcars`. We choose the rows for which engine displacement is more than 400 and only keep the `mpg`, `disp`, and `hp` columns. We first do this in a single function call using the `subset` function.

```{r}
# two styles for selecting certain rows and columns of mtcars
subset(mtcars,
       subset = disp > 400,
       select = c(mpg, disp, hp))
```

Next, we use the piping approach to break the action into smaller parts.

```{r}
mtcars |>
  subset(subset = disp > 400) |>
  subset(select = c(mpg, disp, hp))
```

When reading code with pipes, the pipe can be thought of as the word "then". In the code above, we take `mtcars` *then* subset it based on `disp` and *then* select some columns.

Most parts of the world do not use miles per gallon to measure fuel economy because they don't measure distance in miles nor volume in gallons. A common measure of fuel economy is the liters of fuel required to travel 100 kilometers. Noting that 3.8 liters is approximately equivalent to 1 U.S. gallon and 1.6 kilometers is approximately equivalent to 1 mile, we can convert fuel economy of $x$ miles per gallon to liters per 100 kilometers by noting:

$$\frac{1}{x}\frac{\mathrm{gal}}{\mathrm{mi}}\times\frac{3.8}{1}\frac{\mathrm{L}}{\mathrm{gal}}\times\frac{1}{1.6}\frac{\mathrm{mi}}{\mathrm{km}}\times\frac{100\;\mathrm{km}}{100\;\mathrm{km}} = \frac{237.5}{x}\frac{\mathrm{L}}{100\;\mathrm{km}}.$$

Thus, to convert from miles per gallon to liters per 100 kilometers, we take 237.5 and divide by the number of miles per gallon.

We consider two approaches for converting the units of a variable in miles per gallon to liters per 100 km. In the first approach, we use the `base::transform` function create a new variable, `lp100km`, in the `mtcars` data frame that describes the liters of fuel each car requires to travel 100 kilometers and assign it the name `mtcars2`. Then we select only the columns `mpg` and `lp100km` from `mtcars` and assign it the name `mtcars3`. We then use the `head` function to print only the first 5 observations. Run `?base::transform` in the Console for more details and examples.

```{r}
# create new variable
mtcars2 <- transform(mtcars, lp100km = 237.5/mpg)
# select certain columns
mtcars3 <- subset(mtcars2, select = c(mpg, lp100km))
# print first 5 rows
head(mtcars3, n = 5)
```

Next, we perform the actions above with pipes.

```{r}
# create new variable, select columns, extract first 5 rows
mtcars |>
  transform(lp100km = 237.5/mpg) |>
  subset(select = c(mpg, lp100km)) |>
  head(n = 5)
```

## Dealing with common problems

We are going to have to deal with many errors and problems as we use R. It happens even to the best programmers.

Every problem is unique, but there are common mistakes that we try to provide insight for below.

### `Error in ...: could not find function "..."` 

We probably forgot to load the package needed to use the function. We may also have misspelled the function name.

### `Error: object '...' not found`

The object doesn't exist in loaded memory. Perhaps we forget to assign that name to an object or misspelled the name of the object we are trying to access.

### `Error in plot.new() : figure margins too large`

This typically happens because our Plots pane is too small. We should increase the size of the Plots pane and try again.

### Code was working, but isn't anymore

We may have run code out of order. It may work if we run it in order. Or we may have run something in the Console that we don't have in our Script file. It is good practice to clear our environment (the objects R has loaded in memory) using the broom icon in the Environment pane and rerunning our entire Script file to ensure it behaves as expected. The broom icon is shown in @fig-broom-button.

```{r}
#| echo: false
#| label: fig-broom-button
#| fig-cap: "The broom icon can be clicked to clear the objects loaded in the Environment."
knitr::include_graphics("pictures/broom_button.png")
```

## Ecosystem debate

In general, we favor performing analysis using **base** R functionality, which means we try to perform our analysis with features R offers by default. Some of the benefits of doing this include making our code easier to maintain (**base** R features change very slowly and are nearly always backwards compatible) and often result in faster code. However, more complicated aspects of regression analysis are not easy to perform using **base** R, so we will introduce new packages and functions as we progress.

Many readers may have previous experience working with the **tidyverse** (<https://www.tidyverse.org>) and wonder how frequently we use **tidyverse** functionality. The **tidyverse** offers a unified framework for data manipulation and visualization that tends to be more consistent than **base** R. However, there are many situations where a **base** R solution is more straightforward than a **tidyverse** solution, not to mention the fact that there are many aspects of R programming (e.g., S3 and S4 objects, method dispatch) that require knowledge of **base** R features. Because the R universe is vast and there are many competing coding styles, we will prioritize analysis approaches using **base** R, which gives users a stronger programming foundation. However, we will use parts of the **tidyverse** when it greatly simplifies analysis, data manipulation, or visualization because it provides an extremely useful feature set.

## Going deeper

### Comparing assignment operators {#sec-comparing-assgn-op}

As previously mentioned in Section @sec-assignment, both `<-` and `=` can mostly be used interchangeably for assignment. But there are times when using `=` for assignment can be problematic. Consider the examples below where we want to use `system.time` to time how long it takes to draw 100 values from a standard normal distribution and assign it the name `result`.

This code works:

```{r}
system.time(result <- rnorm(100))
```

This code doesn't work:

```{r, error = TRUE}
system.time(result = rnorm(100))
```

What's the difference? In the second case, R thinks we are setting the `result` argument of the `system.time` function (which doesn't exist) to the value produced by `rnorm(100)`.

Thus, it is best to use `<-` for assigning a name to an object and reserving `=` for specifying function arguments.
